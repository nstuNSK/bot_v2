#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fileencoding=utf-8
import vk_api
import random
import time
import json
import sys
import requests
import database as data
import getter
import keyboards
import api_nstu_news as api
def auth():
    token = getter.get_token()
    print(token)
    vk = vk_api.VkApi(token=token)
    vk._auth_token()
    return vk

def subscribe(type, id):
    if data.get_field(connection=connection, table_name="USERS",select_field = type, field="ID_VK", value=id)[0][0]==False:
        data.set_field(connection = connection, table_name = "USERS", ID_VK = id, field = type, value = "1")
        vk.method("messages.send", {"user_id": id, "message": "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ—Å—Ç–∏! –õ—é–±–ª—é —ç—Ç–æüòç", 'keyboard': key['main_menu']})
    else:
        data.set_field(connection = connection, table_name = "USERS", ID_VK = id, field = type, value = "0")
        vk.method("messages.send", {"user_id": id, "message": "–ù–µ —Ö–æ—á–µ—à—å, –∫–∞–∫ —Ö–æ—á–µ—à—å...\n–ù–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤üí™üèª", 'keyboard': key['main_menu']})

def search_direction_by_subjects(id):
    print("yeah!")
    res = []
    sb2 = data.get_field(select_field = "SUBJECT2",table_name = "USERS",connection= connection,value=id, field="id_vk")[0][0]
    if sb2 == 0:
        vk.method("messages.send", {"user_id": id, "message": "–ö–∞–∂–µ—Ç—Å—è —Ç—ã –∑–∞–±—ã–ª –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã... –î–∞–≤–∞–π, –∏—Å–ø—Ä–∞–≤–ª—è–π—Å—èüòä", "keyboard":key['subjects']})
    else:
        res = data.get_field(select_field = "DIRECTION, PROFILE_NAME, FACULT, DESCR, URL",table_name = "DIRECTIONS",connection= connection,value=sb2, field="DISC2") 
        sb3 = data.get_field(select_field = "SUBJECT3",table_name = "USERS",connection= connection,value=id, field="id_vk")[0][0]
        if sb3!=0:
            temp = data.get_field(select_field = "DIRECTION, PROFILE_NAME, FACULT, DESCR, URL",table_name = "DIRECTIONS",connection= connection,value=sb3, field="DISC3")
            if temp != 0:
                for item in temp:
                    res.append(item)
        res = list(set(res))
        vk.method("messages.send", {"user_id": id, "message": "–ü–æ–Ω–µ—Å–ª–∞—Å—å!"})
        response = ""
        for item in res:
            if item[1]=='None':
                if item[3]=='null':
                    response = response + "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + '"' + item[0] + '"' + " –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ " + item[2]+ "\n" +"–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + item[4]+"\n\n"
                else:
                    response = response + "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + '"' + item[0] + '"' + " –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ " + item[2]+ "\n" +item[3] + "\n" +"–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + item[4]+"\n\n"
            else:
                if item[3]=='null':
                    response = response + "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + '"' + item[0] + ' (' + item[1] + ')' + '"' + " –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ " + item[2]+ "\n" +"–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + item[4]+"\n\n"
                else:
                    response = response + "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + '"' + item[0] + ' (' + item[1] + ')' + '"' + " –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ " + item[2]+ "\n" +item[3] + "\n" +"–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + item[4]+"\n\n"
            if(len(response)>3500):
                vk.method("messages.send", {"user_id": id,"message": response})
                response = ""
        if(response!=""):
            vk.method("messages.send", {"user_id": id,"message": response})
        vk.method("messages.send", {"user_id": id,"message": "–ó–∞—Å—Ç–∞–≤–∏–ª –∂–µ —Ç—ã –º–µ–Ω—è –ø–æ—Ç—Ä—É–¥–∏—Ç—å—Å—è!üòÅ", 'keyboard': key['main_menu']})

def search_direction_by_sphere(id):
    sql = "SELECT NAME, DESCR, FACULTY, URL FROM DIRECTIONS WHERE ID IN (SELECT ID_DIR FROM DIR_SPHERES WHERE ID_SPHERE IN (SELECT ID_SPHERE FROM USERS_SPHERES WHERE ID_USER = "+str(id)+")) GROUP BY ID"
    res = data.executeSQL(sql = sql, connection = connection)
    print("tut")
    if res!=0:
        vk.method("messages.send", {"user_id": id,"message":"–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ªüôÉ"})
        response = ""
        for item in res:
            if item[1]=='null':
                response = response + "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + '"' + item[0] + '"' + " –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ " + item[2]+ "\n" +"–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + item[3]+"\n\n"
            else:
                response = response + "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + '"' + item[0] + ' (' + item[1] + ')' + '"' + " –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ " + item[2]+ "\n" +"–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + item[3]+"\n\n"
            if(len(response)>3500):
                vk.method("messages.send", {"user_id": id,"message": response})
                response = ""
        if(response!=""):
            vk.method("messages.send", {"user_id": id,"message": response})
        vk.method("messages.send", {"user_id": id,"message": "–ò—Å–∫–∞–ª –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑üòÇ", 'keyboard': key['main_menu']})
    else:
        vk.method("messages.send", {"user_id": id,"message":"–ê —Å—Ñ–µ—Ä—ã —è –∑–∞ —Ç–µ–±—è –¥–æ–±–∞–≤–ª—è—Ç—å –±—É–¥—É?", 'keyboard': key['sphere']})

def add_sphere(id, connection, pay):
    sql = "SELECT ID FROM SPHERES WHERE NAME = '"+str(pay)+"'"
    idSph = data.executeSQL(sql = sql, connection = connection)
    sql = "INSERT INTO USERS_SPHERES (ID_USER, ID_SPHERE) VALUES("+str(id)+", "+str(idSph[0][0])+")"
    data.executeSQL(sql = sql, connection = connection)

#WAIT_FILLING_POINTS = "-3"
#WAIT_FILLING = "-2"
#TEMP_FILLING = "-1"


def data_processing(id, pay, msg):
    if data.search_field(table_name="USERS",connection=connection,value=id, field="ID")==False:
        data.set_user(table_name="USERS", connection=connection,ID_VK=id)
    
    if pay=={"command":"start"} or pay == "admin":
        vk.method("messages.send", {"user_id": id, "message": "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –•–≤–∞–Ω‚úãüèª\n \n–ò —è —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –ù–ì–¢–£üòéüòéüòé\n \n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ù–ì–¢–£ –∏ –æ–±–æ –≤—Å–µ–º, —á—Ç–æ —Å –Ω–∏–º —Å–≤—è–∑–∞–Ω–æüòé\n \n–ü—Ä–∞–≤–¥–∞ —è –ø–æ–∫–∞ –Ω–µ —Å–∞–º—ã–π —É–º–Ω—ã–π –±–æ—Ç, –º–Ω–µ –µ—â–µ —É—á–∏—Ç—å—Å—è –∏ —É—á–∏—Ç—å—Å—è, –ø–æ—ç—Ç–æ–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∑–∞–∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ç–µ—Ö —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —è —Å–∞–º –Ω–µ –ø–æ–ø—Ä–æ—à—É –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å) –∏ —Ç–æ–≥–¥–∞ –≤—Å–µ –±—É–¥–µ—Ç —á–∏–∫–∏-–ø—É–∫–∏üôÉ"})
        vk.method("messages.send", {"user_id": id, "message": "–ò—Ç–∞–∫, —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", "keyboard": key['main_menu']})
    
    elif msg=="admin":
        vk.method("messages.send", {"user_id": id, "message": "–û–ø—è—Ç—å –ø–æ –Ω–æ–≤–æ–π? –ù—É, –ª–∞–¥–Ω–æ...", "keyboard":key['start']})
    
    elif pay == "main_menu":
        vk.method("messages.send", {"user_id": id, "message": "–°–¥–µ–ª–∞–ª!", "keyboard":key['main_menu']})

    elif pay=="subscribe":
        vk.method("messages.send", {"user_id": id, "message": "–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?", "keyboard":key['subscribe']})
    
    elif pay=="enrollee":
        subscribe(type = 'SUB_E', id = id)
    
    elif pay=="schoolchild":
        subscribe(type = 'SUB_S', id = id)
    
    elif pay=="direction_selection":
        vk.method("messages.send", {"user_id": id, "message": " –ê –∫–∞–∫ –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–≤–∞–ª–µ–Ω–∏–µ?", "keyboard":key['direction_selection']})
    
    elif pay=="sphere":
        sql = "DELETE FROM USERS_SPHERES WHERE ID_USER = "+str(id)
        data.executeSQL(sql = sql, connection = connection)
        vk.method("messages.send", {"user_id": id, "message": "–ü–æ–¥—Å–∫–∞–∂–∏ —Å—Ñ–µ—Ä—ã, –∞ —Ç–æ —Ç—É—Ç –º–Ω–æ–≥–æüòä", "keyboard":key['sphere']})
    
    elif pay=="–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ" or pay=="–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å" or pay=="–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞" or pay=="IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏" or pay=="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞" or pay=="–ê–≤–∏–∞—Ü–∏—è" or pay=="–û–±—â–µ—Å—Ç–≤–æ" or pay=="–≠–∫–æ–Ω–æ–º–∏–∫–∞" or pay=="–•–∏–º–∏—è" or pay=="–Ø–∑—ã–∫–∏" or pay=="–§–∏–∑–∏–∫–∞":
        msg = ["–î–æ–±–∞–≤–∏–ª! –≠—Ç–æ –±—ã–ª–æ –ª–µ–≥–∫–æüòâ", "–ü—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ–≥–æ! –î–æ–±–∞–≤–∏–ª!", "–ò–∑–∏ –¥–æ–±–∞–≤–∏–ª!"]
        sql = "SELECT ID_SPHERE FROM USERS_SPHERES WHERE ID_USER = "+str(id)
        size = data.executeSQL(sql = sql, connection = connection)
        if size!=0:
            if len(size) < 3:
                add_sphere(id=id,connection=connection, pay = pay)
                vk.method("messages.send", {"user_id": id, "message": random.choice(msg), "keyboard":key['sphere']})
                if len(size)+1>=3:
                    search_direction_by_sphere(id = id)
        else:
            add_sphere(id=id,connection=connection, pay = pay)
            vk.method("messages.send", {"user_id": id, "message": random.choice(msg), "keyboard":key['sphere']})
        
   
    elif pay=="name_dir":
        data.set_field(connection = connection, table_name = "USERS", ID_VK = id, field = "SUBJECT2", value = 0)
        data.set_field(connection = connection, table_name = "USERS", ID_VK = id, field = "SUBJECT3", value = 0)
        data.set_field(connection = connection, table_name = "USERS", ID_VK = id, field = "SUBJECT4", value = 0)
        vk.method("messages.send", {"user_id": id, "message": "–ü–æ –∫–∞–∫–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?\n–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –Ω—É–∂–µ–Ω –¥–ª—è –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É —è –µ–≥–æ —É–∂–µ –¥–æ–±–∞–≤–∏–ªüòä", "keyboard":key['subjects']})

    elif pay == "math" or pay == "biology" or pay == "geography" or pay == "foreign_language" or pay == "informatics" or pay == "history" or pay == "literature" or pay == "social_science" or pay == "physics" or pay == "chemistry":
        subject_id = data.get_field(table_name = "SUBJECTS", connection = connection, select_field = 'ID', field = 'SUBJECT', value = pay)[0][0]
        print(subject_id)
        sb2 = data.get_field(table_name = "USERS", connection = connection, select_field = 'SUBJECT2', field = 'ID_VK', value = id)[0][0]
        if sb2==0:
            vk.method("messages.send", {"user_id": id, "message": "–ü–ª—é—Å –æ–¥–∏–Ωüòâ", "keyboard":key['subjects']})
            data.set_field(connection = connection, table_name = 'USERS', ID_VK = id, field = 'SUBJECT2', value = subject_id)
        else:
            sb3 = data.get_field(table_name = "USERS", connection = connection, select_field = 'SUBJECT3', field = 'ID_VK', value = id)[0][0]
            if sb3==0:
                data.set_field(connection = connection, table_name = 'USERS', ID_VK = id, field = 'SUBJECT3', value = subject_id)
                search_direction_by_subjects(id = id)
    
    elif pay == "search_by_sphere":
        search_direction_by_sphere(id = id)
    elif pay == "search_by_subjects":
        search_direction_by_subjects(id = id)
    #elif pay == "name_dir":
        #vk.method("messages.send", {"user_id": id, "message": "–ú–µ–Ω—è –ø–æ–∫–∞ —á—Ç–æ —ç—Ç–æ–º—É –Ω–µ –Ω–∞—É—á–∏–ª–∏üòû\n–ù–æ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –Ω–∞—É—á–∞—Ç, –æ–±–µ—â–∞—é!", "keyboard": key['main_menu']})
    elif pay == "lists":
        vk.method("messages.send", {"user_id": id, "message": "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", "keyboard": key['list']})
    
    elif pay == "lk_code":
        vk.method("messages.send", {"user_id": id, "message": "–ú–µ–Ω—è –ø–æ–∫–∞ —á—Ç–æ —ç—Ç–æ–º—É –Ω–µ –Ω–∞—É—á–∏–ª–∏üòû\n–ù–æ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –Ω–∞—É—á–∞—Ç, –æ–±–µ—â–∞—é!", "keyboard": key['main_menu']})
    
    elif pay == "frequency":
        vk.method("messages.send", {"user_id": id, "message": "–ú–µ–Ω—è –ø–æ–∫–∞ —á—Ç–æ —ç—Ç–æ–º—É –Ω–µ –Ω–∞—É—á–∏–ª–∏üòû\n–ù–æ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –Ω–∞—É—á–∞—Ç, –æ–±–µ—â–∞—é!", "keyboard": key['main_menu']})
        #vk.method("messages.send", {"user_id": id, "message": "–ö–∞–∫ —á–∞—Å—Ç–æ –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ—Å—Ç–∏?", "keyboard": key['frequency']})
    
    #elif pay == "one_per_day":
        #vk.method("messages.send", {"user_id": id, "message": "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ", "keyboard":key['main_menu']})

    #elif pay == "two_per_day":
        #vk.method("messages.send", {"user_id": id, "message": "–û–ø—è—Ç—å –ø–æ –Ω–æ–≤–æ–π? –ù—É, –ª–∞–¥–Ω–æ...", "keyboard":key['main_menu']})
    elif msg == "–ë—É!":
        vk.method("messages.send", {"user_id": id, "message": "–ê–∞–∞–∞!"})
        vk.method("messages.send", {"user_id": id, "message": "–ê, —ç—Ç–æ —Ç—ãüòÉ"})
        vk.method("messages.send", {"user_id": id, "message": "–ù–µ –ø—É–≥–∞–π –º–µ–Ω—è —Ç–∞–∫ –±–æ–ª—å—à–µüôèüèª", "keyboard": key['main_menu']})
    else:
        vk.method("messages.send", {"user_id": id, "message": "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—éüòî\n–ò—Å–ø–æ–ª—å–∑—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—Éüôèüèª", "keyboard": key['main_menu']})

def get_msg():
    while True:
        try:
            messages = vk.method("messages.getConversations", {"offset": 0, "count": 100, "filter": "unanswered"})
            if messages["count"] >= 1:
                id = messages["items"][0]["last_message"]["from_id"]
                msg = messages["items"][0]["last_message"]["text"]
                if "payload" in messages["items"][0]["last_message"]:
                    pay = messages["items"][0]["last_message"]["payload"][1:-1]
                    try:
                        pay = bytes(pay, 'cp1251').decode('utf-8')
                    except ValueError:
                        pass
                    finally:
                        print(pay)
                else:
                    pay = "0"
                    print(msg)
                data_processing(id=id, pay=pay, msg=msg)
        except Exception:
            time.sleep(0.1)
                 
key = keyboards.get_keyboards() 

vk = auth()
print(vk)  
connection = data.connect()
print(connection)
get_msg()